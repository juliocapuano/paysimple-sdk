<?php

namespace PaySimple\V4\Services;

use GuzzleHttp\Exception\GuzzleException;

class RecurringPaymentsService extends Service
{
    /**
     * Collect payments on scheduled dates for the specified AccountId.
     *
     * @see https://documentation.paysimple.com/reference/recurringpayment
     * @param array $recurring_payment
     * @return array
     * @throws GuzzleException
     */
    final public function new(array $recurring_payment): array
    {
        return $this->client->post('recurringpayment', $recurring_payment);
    }

    /**
     * Returns a recurring payment object for the specified schedule id.
     *
     * @see https://documentation.paysimple.com/reference/get-recurring-payment
     * @param int $schedule_id
     * @return array
     * @throws GuzzleException
     */
    final public function get(int $schedule_id): array
    {
        return $this->client->get(sprintf("recurringpayment/%s", $schedule_id));
    }

    /**
     * Filterable and sortable list of all recurring payments.
     *
     * @see https://documentation.paysimple.com/reference/list-recurring-payments
     * @param array $filters
     * @return array
     * @throws GuzzleException
     */
    final public function list(array $filters = []): array
    {
        return $this->client->get('recurringpayment', $filters);
    }

    /**
     * Filterable and sortable list of recurring payments for a customer.
     *
     * @see https://documentation.paysimple.com/reference/list-customer-recurring-payments
     * @param int $customer_id
     * @return array
     * @throws GuzzleException
     */
    final public function customerList(int $customer_id): array
    {
        return $this->client->put(sprintf("customer/%s/recurringpayments", $customer_id));
    }

    /**
     * Retrieve payments generated by a given Recurring Payment.
     *
     * @see https://documentation.paysimple.com/reference/list-payments
     * @param int $schedule_id
     * @return array
     * @throws GuzzleException
     */
    final public function paymentList(int $schedule_id): array
    {
        return $this->client->put(sprintf("recurringpayment/%s/payments", $schedule_id));
    }

    /**
     * Modifies the specified recurring payment.
     *
     * @see https://documentation.paysimple.com/reference/update-recurring-payment
     * @param array $recurring_payment
     * @return array
     * @throws GuzzleException
     */
    final public function update(array $recurring_payment): array
    {
        return $this->client->put('recurringpayment', $recurring_payment);
    }

    /**
     * Stop a recurring payment from generating payments until resumed.
     *
     * @see https://documentation.paysimple.com/reference/suspend
     * @param int $schedule_id
     * @return array
     * @throws GuzzleException
     */
    final public function suspend(int $schedule_id): array
    {
        return $this->client->put(sprintf('recurringpayment/%s/suspend', $schedule_id));
    }

    /**
     * Stop a recurring payment from generating payments until a specified date.
     *
     * @see https://documentation.paysimple.com/reference/pause
     * @param int $schedule_id
     * @param \DateTime $end_date
     * @return array
     * @throws GuzzleException
     */
    final public function pause(int $schedule_id, \DateTime $end_date): array
    {
        $final_end_date = $end_date->format('Y-m-d');
        return $this->client->put(sprintf('recurringpayment/%s/pause?enddate=%s', $schedule_id, $final_end_date));
    }

    /**
     * Resume a paused or suspended schedule.
     *
     * @see https://documentation.paysimple.com/reference/resume
     * @param int $schedule_id
     * @return array
     * @throws GuzzleException
     */
    final public function resume(int $schedule_id): array
    {
        return $this->client->put(sprintf('recurringpayment/%s/resume', $schedule_id));
    }

    /**
     * Deletes recurring payment created in error.
     *
     * @see https://documentation.paysimple.com/reference/delete-recurring-payment
     * @param int $schedule_id
     * @return array
     * @throws GuzzleException
     */
    final public function delete(int $schedule_id): array
    {
        return $this->client->delete(sprintf('recurringpayment/%s', $schedule_id));
    }


}
